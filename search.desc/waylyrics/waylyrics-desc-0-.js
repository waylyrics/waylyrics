searchState.loadedDescShard("waylyrics", 0, "Used with functions requiring reqwest.\nGLib type: GObject with reference counted clone semantics.\nMakes a clone of this shared reference.\nComparison for two GObjects.\nEquality for two GObjects.\nReturns the argument unchanged.\nHashes the memory address of this object.\nCalls <code>U::from(self)</code>.\nPartial comparison for two GObjects.\nQuit Waylyrics\nset label content for above label\nset label content for below label\nset new lyric display mode\nset new lyric alignment mode\ntoggles GTK+ CSD\ntoggles mouse click passthrough\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuit Waylyrics\nset label content for above label\nset label content for below label\nset new lyric display mode\nset new lyric alignment mode\ntoggles GTK+ CSD\ntoggles mouse click passthrough\nGLib type: GObject with reference counted clone semantics.\nGLib type: GObject with reference counted clone semantics.\nMakes a clone of this shared reference.\nMakes a clone of this shared reference.\nComparison for two GObjects.\nComparison for two GObjects.\nListen for notifications of a change in the <code>album</code> property\nListen for notifications of a change in the <code>id</code> property\nListen for notifications of a change in the <code>length</code> property\nListen for notifications of a change in the <code>provider-idx</code> …\nListen for notifications of a change in the <code>provider-name</code> …\nListen for notifications of a change in the <code>singer</code> property\nListen for notifications of a change in the <code>title</code> property\nEquality for two GObjects.\nEquality for two GObjects.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the memory address of this object.\nHashes the memory address of this object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify listeners of a change in the <code>album</code> property\nNotify listeners of a change in the <code>id</code> property\nNotify listeners of a change in the <code>length</code> property\nNotify listeners of a change in the <code>provider-idx</code> property\nNotify listeners of a change in the <code>provider-name</code> property\nNotify listeners of a change in the <code>singer</code> property\nNotify listeners of a change in the <code>title</code> property\nPartial comparison for two GObjects.\nPartial comparison for two GObjects.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters the type only once.\nRegisters the type only once.\nset css style for waylyrics As said in GTK+ doc, gtk …\nGLib type: GObject with reference counted clone semantics.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegisters the type only once.\nAn iterator over the variants of Align\nAn iterator over the variants of ColorScheme\nright align\nAn iterator over the variants of LyricDisplayMode\nleft align\ncheck GTK+’s official document for trigger format\nauto connect to a player if last was …\nwhether to cache lyrics\nColor scheme used for Gtk interface – light, dark or …\nif enabled, lyrics match one or more <code>filter_regex</code> will be …\nif enabled, when waylyrics find <code>xesam:url</code>\nif enabled, when waylyrics loads a local lyric file,\nhide lyric if it matches any of these regexies\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwaylyrics matches lyrics with <code>weights</code>\navaliable options: 网易云音乐, QQ音乐, LRCLib\nthe interval waylyrics refreshes lyric labels\nplayer with these identity will be ignored\nplayer with these name will be ignored\nthe interval waylyrics updates position/metadata from …\nQQMusic config\ntry to refetch lyric\nreapply current theme file\nmanually search lyric\nif enabled, waylyrics will set <code>DEFAULT_TEXT</code> on idle,\nif enabled, waylyrics will show lyric on <code>Pause</code>\nwhether to run tray-icon service\nwhether to show GTK+ CSD\nwhether to allow mouse click-through\ntheme to load (.css)\nWhether to use -dark.css when system is in dark mode\nshortcuts when focusing on waylyrics\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nConstructs an event at the debug level.\nConstructs an event at the error level.\nConstructs an event at the info level.\nConstructs an event at the trace level.\nConstructs an event at the warn level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the enum is LyricOwned::LineTimestamp …\nReturns true if the enum is LyricOwned::NoTimestamp …\nReturns true if the enum is LyricOwned::None otherwise …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQQMusicApi api url\nQQMusic Cookies\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nQQMusicApi api url\nQQMusic Cookies\nparses lrc tags in each line\nA global variable that contains current playing state …\nmetadata from connected player\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nupdate lyric, but do not ignore cache\nThis function should: call <code>update_lyric</code> when fetched new …\nupdate lyric, but do not ignore cache\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis function should: call <code>update_lyric</code> when fetched new …\ncall <code>update_lyric</code> when we fetched new metadata\nfind a likely active player ignore players in blacklists\nReturns the argument unchanged.\nThis will not create cache dir for you – you should …\nCalls <code>U::from(self)</code>.\nUsing olyric and tlyric inside LYRIC to update …\nReturns the argument unchanged.\nReturns the argument unchanged.\nreplace file extension with .lrc\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nboth singer and album are optional non-empty string\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nCheck system color scheme")